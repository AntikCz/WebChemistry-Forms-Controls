if("object"!=typeof WebChemistry)var WebChemistry={};var _tmp=function($){return{hasMethod:function(obj,method){return"function"==typeof obj[method]},isObject:function(obj){return"object"==typeof obj},isCallable:function(callback){return"function"==typeof callback},isUndefined:function(v){return"undefined"==typeof v},printError:function(msg){console.error("Form controls: "+msg)},extensionMissing:function(name,isJquery){return this.isUndefined(isJquery)&&(isJquery=!0),isJquery?void this.printError('jQuery extension "'+name+'" is missing.'):void this.printError('Extension "'+name+'" is missing.')},hasProperty:function(obj,name){return!!this.isObject(obj)&&name in obj},parseJSON:function(str){return $.parseJSON(str)},mark:function(target){target.attr("data-form-controls-mark-loaded","true")},isMarked:function(target){return"true"===target.attr("data-form-controls-mark-loaded")},removeMark:function(target){target.attr("data-form-controls-mark-loaded","false")},merge:function(){var args=arguments;return Array.prototype.unshift.call(args,!0),$.extend.apply(this,args)}}}(jQuery);WebChemistry.FormControlsHelpers=_tmp;var _tmp=function($,undefined){if($==undefined)return void console.error("jQuery missing.");var helpers=WebChemistry.FormControlsHelpers;return{isInitialized:!1,settings:{},controls:{},addSettings:function(settings){return this.isInitialized?void helpers.printError("Controls is initialized. This settings has no effect."):void(this.settings=helpers.merge(this.settings,settings))},init:function(){if(!this.isInitialized){var i,obj,settings,state;this.isInitialized=!0;for(i in this.controls)obj=this.controls[i],settings=this.settings[i]!==undefined?this.settings[i]:{},obj.init(settings),obj.isEnabled()&&(helpers.hasMethod(obj,"before")&&(state=obj.before(settings)),obj.isEnabled()&&(obj.load(),helpers.hasMethod(obj,"after")&&obj.after()))}},update:function(){var i,obj;for(i in this.controls)obj=this.controls[i],obj.isEnabled()&&obj.load()},registerNetteAjaxEvent:function(){if(helpers.isUndefined($.nette.ajax))return void helpers.printError("$.nette.ajax missing.");var self=this;$.nette.ext("formControlsAutoEvent",{success:function(){self.update()}})},addControl:function(name,object){helpers.isObject(object)||this.printError(name+" must be object."),helpers.hasMethod(object,"init")||this.printError(name+" must have init function."),helpers.hasMethod(object,"load")||this.printError(name+" must have load function."),helpers.hasMethod(object,"isEnabled")||this.printError(name+" must have isEnabled function."),this.controls[name]=object}}}(jQuery);WebChemistry.FormControls=_tmp,function($){var helpers=WebChemistry.FormControlsHelpers,ctrl={options:{enable:!0,selector:"input.date-input",plugin:{options:{},callback:function(){}}},isEnabled:function(){return this.options.enable},init:function(s){this.options=helpers.merge(this.options,s)},before:function(){helpers.isUndefined($.fn.datetimepicker)&&(this.options.enable=!1,helpers.extensionMissing("datetimepicker"))},load:function(){var self=this;$(this.options.selector).each(function(){var target=$(this);if(!helpers.isMarked(target)){var options=helpers.merge({format:target.attr("date-format")},helpers.parseJSON(target.attr("data-settings")),self.options.plugin.options);self.callCallback(options,target)!==!1&&(target.datetimepicker(options),helpers.mark(target))}})},callCallback:function(settings,target){var callback=this.options.plugin.callback;return helpers.isCallable(callback)||helpers.printError("Callback must be an function."),callback(settings,target)}};WebChemistry.FormControls.addControl("date",ctrl)}(jQuery),function($){var helpers=WebChemistry.FormControlsHelpers,ctrl={options:{enable:!0,selector:"input[data-mask-input]",plugin:{options:{},callback:function(){}}},isEnabled:function(){return this.options.enable},init:function(s){this.options=helpers.merge(this.options,s)},before:function(){helpers.isUndefined($.fn.inputmask)&&(this.options.enable=!1,helpers.extensionMissing("inputmask"))},load:function(){var self=this;$(this.options.selector).each(function(){var target=$(this);if(!helpers.isMarked(target)){var options=helpers.merge(helpers.parseJSON(target.attr("data-mask-input")),self.options.plugin.options);self.callCallback(options,target)!==!1&&(helpers.isUndefined(options.regex)?target.inputmask(options):target.inputmask("Regex",options),helpers.mark(target))}})},callCallback:function(settings,target){var callback=this.options.plugin.callback;return helpers.isCallable(callback)||helpers.printError("Callback must be an function."),callback(settings,target)}};WebChemistry.FormControls.addControl("mask",ctrl)}(jQuery),function($){var helpers=WebChemistry.FormControlsHelpers,ctrl={options:{enable:!0,selector:"input.suggestion-input",plugin:{options:{},callback:function(){}}},isEnabled:function(){return this.options.enable},init:function(s){this.options=helpers.merge(this.options,s)},before:function(){helpers.isUndefined($.fn.easyAutocomplete)&&(this.options.enable=!1,helpers.extensionMissing("easyAutocomplete"))},load:function(){var self=this;$(this.options.selector).each(function(){var target=$(this);if(!helpers.isMarked(target)){var options=helpers.merge({url:function(pharse){return target.attr("data-url")+"&term="+pharse}},helpers.parseJSON(target.attr("data-suggestion")),self.options.plugin.options);self.callCallback(options,target)!==!1&&(target.easyAutocomplete(options),helpers.mark(target))}})},callCallback:function(settings,target){var callback=this.options.plugin.callback;return helpers.isCallable(callback)||helpers.printError("Callback must be an function."),callback(settings,target)}};WebChemistry.FormControls.addControl("suggestion",ctrl)}(jQuery),function($){var helpers=WebChemistry.FormControlsHelpers,ctrl={options:{enable:!0,plugin:{options:{},callback:function(){}},selector:"input.tag-input"},isEnabled:function(){return this.options.enable},init:function(s){this.options=helpers.merge(this.options,s)},before:function(){helpers.isUndefined($.fn.tagsInput)&&(this.options.enable=!1,helpers.extensionMissing("tagsInput"))},load:function(){var self=this;$(this.options.selector).each(function(){var target=$(this);if(!helpers.isMarked(target)){var options=self.options.plugin.options;self.callCallback(options,target)!==!1&&(target.tagsInput(options),helpers.mark(target))}})},callCallback:function(settings,target){var callback=this.options.plugin.callback;return helpers.isCallable(callback)||helpers.printError("Callback must be an function."),callback(settings,target)}};WebChemistry.FormControls.addControl("tags",ctrl)}(jQuery);